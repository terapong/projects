# Micro-ROS on Raspberry Pi Pico with Ultrasonic Sensor in C++

This guide will help you set up a Micro-ROS node on a Raspberry Pi Pico that reads data from an ultrasonic sensor (like HC-SR04) and publishes it to a ROS 2 network.

## Prerequisites

- Raspberry Pi Pico
- HC-SR04 ultrasonic sensor or similar
- Micro-ROS setup for Raspberry Pi Pico
- ROS 2 installation on your host machine
- Basic C++ knowledge

## Hardware Connections

Connect the ultrasonic sensor to your Pico:

```
HC-SR04    | Pico
VCC        | VSYS (5V)
Trig       | GP15 (or any free GPIO)
Echo       | GP14 (or any free GPIO)
GND        | GND
```

## Micro-ROS Node Code

Here's a complete C++ example for a Micro-ROS node that reads the ultrasonic sensor and publishes distance data:

```cpp
#include <stdio.h>
#include "pico/stdlib.h"
#include "rcl/rcl.h"
#include "rclc/rclc.h"
#include "rclc/executor.h"
#include "sensor_msgs/msg/range.h"

// Ultrasonic sensor pins
#define TRIG_PIN 15
#define ECHO_PIN 14

// ROS 2 objects
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_publisher_t publisher;
sensor_msgs__msg__Range range_msg;
rcl_timer_t timer;

// Timer callback for publishing sensor data
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
    (void)last_call_time;
    if (timer != NULL) {
        // Trigger the ultrasonic sensor
        gpio_put(TRIG_PIN, 1);
        sleep_us(10);
        gpio_put(TRIG_PIN, 0);
        
        // Wait for echo to go high
        while(gpio_get(ECHO_PIN) == 0);
        absolute_time_t start_time = get_absolute_time();
        
        // Wait for echo to go low
        while(gpio_get(ECHO_PIN) == 1);
        absolute_time_t end_time = get_absolute_time();
        
        // Calculate duration and distance
        int64_t duration_us = absolute_time_diff_us(start_time, end_time);
        float distance_cm = duration_us * 0.0343 / 2;  // Speed of sound in cm/us
        
        // Populate the ROS message
        range_msg.radiation_type = sensor_msgs__msg__Range__ULTRASOUND;
        range_msg.field_of_view = 0.1f;  // ~10 degree field of view
        range_msg.min_range = 0.02f;     // 2cm minimum
        range_msg.max_range = 4.0f;      // 4m maximum
        range_msg.range = distance_cm / 100.0f;  // Convert to meters
        
        // Publish the message
        rcl_publish(&publisher, &range_msg, NULL);
    }
}

int main() {
    // Initialize Pico SDK
    stdio_init_all();
    
    // Initialize GPIO for ultrasonic sensor
    gpio_init(TRIG_PIN);
    gpio_set_dir(TRIG_PIN, GPIO_OUT);
    gpio_init(ECHO_PIN);
    gpio_set_dir(ECHO_PIN, GPIO_IN);
    
    // Initialize Micro-ROS
    allocator = rcl_get_default_allocator();
    rclc_support_init(&support, 0, NULL, &allocator);
    
    // Create node
    rclc_node_init_default(&node, "pico_ultrasonic_node", "", &support);
    
    // Create publisher
    rclc_publisher_init_default(
        &publisher,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Range),
        "ultrasonic_distance");
    
    // Initialize message
    sensor_msgs__msg__Range__init(&range_msg);
    range_msg.header.frame_id.data = "ultrasonic_sensor";
    range_msg.header.frame_id.size = strlen("ultrasonic_sensor");
    
    // Create timer for periodic publishing (100ms)
    rclc_timer_init_default(
        &timer,
        &support,
        RCL_MS_TO_NS(100),
        timer_callback);
    
    // Create executor
    rclc_executor_t executor;
    rclc_executor_init(&executor, &support.context, 1, &allocator);
    rclc_executor_add_timer(&executor, &timer);
    
    // Main loop
    while(true) {
        rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
    }
    
    // Cleanup (unreachable in this example)
    rcl_publisher_fini(&publisher, &node);
    rcl_node_fini(&node);
    
    return 0;
}
```

## Building and Flashing

1. Set up your Micro-ROS development environment for Raspberry Pi Pico
2. Add this code to your Micro-ROS project
3. Build the firmware
4. Flash the .uf2 file to your Pico

## ROS 2 Setup on Host Machine

On your ROS 2 host machine (connected to the same network as the Pico):

1. Install the Micro-ROS agent:
   ```bash
   sudo apt install ros-${ROS_DISTRO}-micro-ros-agent
   ```

2. Run the agent:
   ```bash
   ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyACM0
   ```
   (Replace `/dev/ttyACM0` with your Pico's serial port)

3. In another terminal, you can listen to the distance data:
   ```bash
   ros2 topic echo /ultrasonic_distance
   ```

## Customizing the Example

- Adjust the GPIO pins as needed for your hardware setup
- Change the publishing rate by modifying the timer period
- Add additional sensors or functionality as needed
- Implement error handling for sensor timeouts

This example provides a complete solution for integrating an ultrasonic sensor with ROS 2 using Micro-ROS on Raspberry Pi Pico. The distance measurements will be published as ROS 2 Range messages on the `/ultrasonic_distance` topic.
