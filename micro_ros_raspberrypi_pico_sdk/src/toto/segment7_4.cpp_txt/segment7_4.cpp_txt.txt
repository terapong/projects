#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <rcl/error_handling.h>
#include "pico/stdlib.h"
#include "../pico_uart_transports.h"
#include <rmw_microros/rmw_microros.h>

rcl_node_t node;
rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_publisher_t publisher;
rcl_subscription_t subscriber;

#include <std_msgs/msg/int32.h>
std_msgs__msg__Int32 msg;

#define LED_PIN_A 1
#define LED_PIN_B 5
#define LED_PIN_C 9
#define LED_PIN_D 7
#define LED_PIN_E 6
#define LED_PIN_F 2
#define LED_PIN_G 10
#define LED_PIN_DP 8
#define LED_PIN_D1 0
#define LED_PIN_D2 3
#define LED_PIN_D3 4
#define LED_PIN_D4 11

int HIGH = 1;
int LOW = 0;

unsigned long lastTime = 0;
unsigned int digitPos = 1;

unsigned int exitLoop = true;

unsigned long lastTime = 0;
unsigned int digitPos = 1;

unsigned int exitLoop = true;

void segment7(int _a, int _b, int _c, int _d, int _e, int _f, int _g, int _dp) {
  gpio_put(LED_PIN_A, _a);
  gpio_put(LED_PIN_B, _b);
  gpio_put(LED_PIN_C, _c);
  gpio_put(LED_PIN_D, _d);
  gpio_put(LED_PIN_E, _e);
  gpio_put(LED_PIN_F, _f);
  gpio_put(LED_PIN_G, _g);
  gpio_put(LED_PIN_DP, _dp);
}

void showDigit(int value) {
  if (value == 0) {
    segment7(HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, LOW, LOW);
  } else if (value == 1) {
    segment7(LOW, HIGH, HIGH, LOW, LOW, LOW, LOW, LOW);
  } else if (value == 2) {
    segment7(HIGH, HIGH, LOW, HIGH, HIGH, LOW, HIGH, LOW);
  } else if (value == 3) {
    segment7(HIGH, HIGH, HIGH, HIGH, LOW, LOW, HIGH, LOW);
  } else if (value == 4) {
    segment7(LOW, HIGH, HIGH, LOW, LOW, HIGH, HIGH, LOW);
  } else if (value == 5) {
    segment7(HIGH, LOW, HIGH, HIGH, LOW, HIGH, HIGH, LOW);
  } else if (value == 6) {
    segment7(HIGH, LOW, HIGH, HIGH, HIGH, HIGH, HIGH, LOW);
  } else if (value == 7) {
    segment7(HIGH, HIGH, HIGH, LOW, LOW, LOW, LOW, LOW);
  } else if (value == 8) {
    segment7(HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, LOW);
  } else if (value == 9) {
    segment7(HIGH, HIGH, HIGH, HIGH, LOW, HIGH, HIGH, LOW);
  } else {
    segment7(LOW, LOW, LOW, LOW, LOW, LOW, LOW, HIGH);
  }
}

void subscription_callback(const void *msgin) {
  const std_msgs__msg__Int32 *msg_toto = (const std_msgs__msg__Int32 *)msgin;
  unsigned int value = msg_toto->data;

  gpio_init(LED_PIN_D1); gpio_set_dir(LED_PIN_D1, GPIO_OUT);
  gpio_init(LED_PIN_D2); gpio_set_dir(LED_PIN_D2, GPIO_OUT);
  gpio_init(LED_PIN_D3); gpio_set_dir(LED_PIN_D3, GPIO_OUT);
  gpio_init(LED_PIN_D4); gpio_set_dir(LED_PIN_D4, GPIO_OUT);

  msg.data = msg_toto->data;
  rcl_publish(&publisher, &msg, NULL);  //มันส่งมาแล้วนี่หว่า

  exitLoop = true;  //รับค่าใหม่ แล้ว loop
  while (exitLoop) {
    unsigned long currentTime = now.tim
    if (currentTime - lastTime >= 1) {
      lastTime = currentTime;
      digitPos++;
      if (digitPos > 4) {
        digitPos = 1;
      }
      unsigned int digitToShow = (value / (int)(pow(10, 4 - digitPos) + 0.5)) % 10;
      // Publish the LED state
      if (digitPos == 1) {  //bug ก่อนว่าเข้าไหม น่ะ
        showDigit(digitToShow);
        gpio_put(LED_PIN_D1, LOW);
        gpio_put(LED_PIN_D2, HIGH);
        gpio_put(LED_PIN_D3, HIGH);
        gpio_put(LED_PIN_D4, HIGH);
      } else if (digitPos == 2) {
        showDigit(digitToShow);
        gpio_put(LED_PIN_D1, HIGH);
        gpio_put(LED_PIN_D2, LOW);
        gpio_put(LED_PIN_D3, HIGH);
        gpio_put(LED_PIN_D4, HIGH);
      } else if (digitPos == 3) {
        showDigit(digitToShow);
        gpio_put(LED_PIN_D1, HIGH);
        gpio_put(LED_PIN_D2, HIGH);
        gpio_put(LED_PIN_D3, LOW);
        gpio_put(LED_PIN_D4, HIGH);
      } else {
        showDigit(digitToShow);
        gpio_put(LED_PIN_D1, HIGH);
        gpio_put(LED_PIN_D2, HIGH);
        gpio_put(LED_PIN_D3, HIGH);
        gpio_put(LED_PIN_D4, LOW);
      }
    }
  }
}

int main()
{
    rmw_uros_set_custom_transport(
		true,
		NULL,
		pico_serial_transport_open,
		pico_serial_transport_close,
		pico_serial_transport_write,
		pico_serial_transport_read
	);

    gpio_init(LED_PIN_A);
    gpio_init(LED_PIN_B);
    gpio_init(LED_PIN_C);
    gpio_init(LED_PIN_D);
    gpio_init(LED_PIN_E);
    gpio_init(LED_PIN_F);
    gpio_init(LED_PIN_G);
    gpio_init(LED_PIN_DP);
    gpio_set_dir(LED_PIN_A, GPIO_OUT);
    gpio_set_dir(LED_PIN_B, GPIO_OUT);
    gpio_set_dir(LED_PIN_C, GPIO_OUT);
    gpio_set_dir(LED_PIN_D, GPIO_OUT);
    gpio_set_dir(LED_PIN_E, GPIO_OUT);
    gpio_set_dir(LED_PIN_F, GPIO_OUT);
    gpio_set_dir(LED_PIN_G, GPIO_OUT);
    gpio_set_dir(LED_PIN_DP, GPIO_OUT);

    // Set up Micro-ROS
    allocator = rcl_get_default_allocator();

    // Wait for agent successful ping for 2 minutes.
    const int timeout_ms = 1000; 
    const uint8_t attempts = 120;

    rcl_ret_t ret = rmw_uros_ping_agent(timeout_ms, attempts);
    if (ret != RCL_RET_OK) {
        // Unreachable agent, exiting program.
        return ret;
    }

    rclc_support_init(&support, 0, NULL, &allocator);
    rclc_node_init_default(&node, "otto_node", "", &support);

// Create publisher
  rclc_publisher_init_default(
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "segment7_4_state");

  // Create subscriber
  rclc_subscription_init_default(
    &subscriber,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "segment7_4_command");

    rclc_executor_init(&executor, &support.context, 1, &allocator);
    rclc_executor_add_subscription(&executor, &subscriber, &msg, &subscription_callback, ON_NEW_DATA);

    while (true) {
        rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
    }
    return 0;
}

//ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyACM0
//ros2 topic list
//ros2 topic echo /segment7_4_state
//ros2 topic pub --once /segment7_4_command std_msgs/msg/Int32 "data: 1"
//ros2 topic pub --once /segment7_4_command std_msgs/msg/Int32 "data: 2"
//ros2 run otto_robot segment7_control_gui
