# Micro-ROS on Raspberry Pi Pico with Joystick in C++

This guide will help you set up Micro-ROS on a Raspberry Pi Pico to read from a joystick module and publish the values as ROS 2 messages.

## Prerequisites

- Raspberry Pi Pico (or Pico W)
- Analog joystick module (typically with X/Y axes and a button)
- Micro-ROS setup for Raspberry Pi Pico
- ROS 2 environment on your host machine

## Hardware Connections

Connect your joystick to the Pico:

```
Joystick VCC  -> Pico 3.3V (pin 36)
Joystick GND  -> Pico GND (pin 38)
Joystick VRX  -> Pico ADC0 (GP26, pin 31)
Joystick VRY  -> Pico ADC1 (GP27, pin 32)
Joystick SW   -> Pico GPIO (e.g., GP16, pin 21)
```

## Micro-ROS Code

Here's a complete C++ example for reading joystick values and publishing them via Micro-ROS:

```cpp
#include <micro_ros_platformio.h>
#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <sensor_msgs/msg/joy.h>

// Pico pins
#define JOY_X_PIN 26  // GP26 (ADC0)
#define JOY_Y_PIN 27  // GP27 (ADC1)
#define JOY_BTN_PIN 16 // GP16

rcl_publisher_t publisher;
sensor_msgs__msg__Joy joy_msg;
rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_timer_t timer;

#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){}}

void error_loop() {
  while(1) {
    delay(100);
  }
}

void timer_callback(rcl_timer_t * timer, int64_t last_call_time) {
  (void) last_call_time;
  if (timer != NULL) {
    // Read joystick values
    joy_msg.axes.data[0] = (float)(analogRead(JOY_X_PIN) / 65535.0 * 2.0 - 1.0; // Convert to -1.0 to 1.0
    joy_msg.axes.data[1] = (float)(analogRead(JOY_Y_PIN) / 65535.0 * 2.0 - 1.0;
    joy_msg.buttons.data[0] = !digitalRead(JOY_BTN_PIN); // Button is usually active low
    
    // Publish message
    RCSOFTCHECK(rcl_publish(&publisher, &joy_msg, NULL));
  }
}

void setup() {
  // Configure serial transport
  set_microros_serial_transports(Serial);
  
  // Initialize joystick pins
  pinMode(JOY_X_PIN, INPUT);
  pinMode(JOY_Y_PIN, INPUT);
  pinMode(JOY_BTN_PIN, INPUT_PULLUP);
  
  delay(2000);

  allocator = rcl_get_default_allocator();

  // Create init_options
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));

  // Create node
  RCCHECK(rclc_node_init_default(&node, "pico_joystick_node", "", &support));

  // Create publisher
  RCCHECK(rclc_publisher_init_default(
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Joy),
    "joy"));

  // Initialize joy message
  joy_msg.axes.data = (float*) malloc(2 * sizeof(float));
  joy_msg.axes.size = 2;
  joy_msg.buttons.data = (int32_t*) malloc(1 * sizeof(int32_t));
  joy_msg.buttons.size = 1;

  // Create timer
  const unsigned int timer_timeout = 100;
  RCCHECK(rclc_timer_init_default(
    &timer,
    &support,
    RCL_MS_TO_NS(timer_timeout),
    timer_callback));

  // Create executor
  RCCHECK(rclc_executor_init(&executor, &support.context, 1, &allocator));
  RCCHECK(rclc_executor_add_timer(&executor, &timer));
}

void loop() {
  delay(100);
  RCSOFTCHECK(rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100)));
}
```

## PlatformIO Configuration

Your `platformio.ini` should include Micro-ROS dependencies:

```ini
[env:pico]
platform = raspberrypi
board = pico
framework = arduino
lib_deps =
    https://github.com/micro-ROS/micro_ros_platformio
```

## Building and Flashing

1. Connect your Pico in bootloader mode (hold BOOTSEL while plugging in USB)
2. Build and upload with PlatformIO
3. Set up the Micro-ROS agent on your host machine

## Running the Example

1. Start the Micro-ROS agent on your host machine:
   ```bash
   ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyACM0
   ```
   (Replace `/dev/ttyACM0` with your Pico's serial port)

2. On another terminal, you can echo the joystick topic:
   ```bash
   ros2 topic echo /joy
   ```

## Customizing the Example

- Adjust the pin definitions if you're using different GPIOs
- Modify the message type if you want to use a different ROS 2 message
- Change the publishing rate by adjusting the `timer_timeout` value

## Troubleshooting

- If you don't see messages, check the serial connection and baud rate
- Ensure your joystick is properly connected and powered (3.3V only)
- Verify the Micro-ROS agent is properly installed and running

This example provides a foundation for integrating analog joysticks with Micro-ROS on the Raspberry Pi Pico, which you can extend for more complex robotics applications.
