#include <stdio.h>

#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/int32.h>
#include <rmw_microros/rmw_microros.h>

#include "pico/stdlib.h"
#include "pico_uart_transports.h"

#include "std_msgs/msg/bool.h"

const uint LED_PIN_0 = 0;
const uint LED_PIN_1 = 1;

// Timer for blinking the LED
rcl_timer_t timer;

rcl_publisher_t publisher;
std_msgs__msg__Int32 msg;
//ปิด/เปิด LED บน Python
std_msgs__msg__Int32 msg_python_led;

rcl_subscription_t subscriber;
std_msgs__msg__Bool sub_msg;

// Callback function for the timer 
//void subscription_callback(const void * msgin)
// Callback function to control the LED
// void led_callback(const void* msg_in) {
//     const std_msgs__msg__Bool* msg = (const std_msgs__msg__Bool*)msg_in;
//     if (msg->data) {
//         gpio_put(LED_PIN, 1);  // Turn on LED
//     } else {
//         gpio_put(LED_PIN, 0);  // Turn off LED
//     }
// }
void timer_callback_LED(const void* msg_in) {
    //(void)last_call_time;
    //if (timer != NULL) {
        // Toggle the LED
        //gpio_put(LED_PIN_1, !gpio_get(LED_PIN_1));

        const std_msgs__msg__Bool * msg_toto = (const std_msgs__msg__Bool *)msg_in;
        if (msg_toto->data) {
            // turn on LED
            gpio_put(LED_PIN_1, 1);
            //msg.data = gpio_get(LED_PIN_1);
        } else {
            // turn off LED
            gpio_put(LED_PIN_1, 0);
        }

        // Publish the LED state
        msg.data = gpio_get(LED_PIN_1);
        rcl_publish(&publisher, &msg, NULL); //มันส่งมาแล้วนี่หว่า
    //}
}

void timer_callback(rcl_timer_t *timer, int64_t last_call_time)
{
    // rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
    // msg.data++;
}

int main()
{
    rmw_uros_set_custom_transport(
		true,
		NULL,
		pico_serial_transport_open,
		pico_serial_transport_close,
		pico_serial_transport_write,
		pico_serial_transport_read
	);

    gpio_init(LED_PIN_0);
    gpio_set_dir(LED_PIN_0, GPIO_OUT);
    gpio_init(LED_PIN_1);
    gpio_set_dir(LED_PIN_1, GPIO_OUT);

    rcl_timer_t timer;
    rcl_node_t node;
    rcl_allocator_t allocator;
    rclc_support_t support;
    rclc_executor_t executor;

    allocator = rcl_get_default_allocator();

    // Wait for agent successful ping for 2 minutes.
    const int timeout_ms = 1000; 
    const uint8_t attempts = 120;

    rcl_ret_t ret = rmw_uros_ping_agent(timeout_ms, attempts);

    if (ret != RCL_RET_OK)
    {
        // Unreachable agent, exiting program.
        return ret;
    }

    rclc_support_init(&support, 0, NULL, &allocator);

    rclc_node_init_default(&node, "pico_node", "", &support);

    // Create a Micro-ROS node ไม่ต้อง ทำ node ใหม่น่ะ
    //rclc_node_init_default(&node, "pico_led_node", "", &support);

    rclc_publisher_init_default(
        &publisher,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
        "pico_publisher");

    rcl_ret_t rc = rclc_subscription_init_default(
        &subscriber, &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Bool),
        "led_state");

    rclc_timer_init_default(
        &timer,
        &support,
        RCL_MS_TO_NS(1000),
        timer_callback);

    rclc_executor_init(&executor, &support.context, 2, &allocator); //เปลี่ยนจาก 1 => 2
    rclc_executor_add_timer(&executor, &timer);
    // Add subscription to the executor
    rc = rclc_executor_add_subscription(
        &executor, &subscriber, &sub_msg, //แก้ตัวนี้ด้วย จาก msg -> sub_msg
        &timer_callback_LED, ON_NEW_DATA);

    gpio_put(LED_PIN_0, 1);
    gpio_put(LED_PIN_1, 1);

    msg.data = 0;
    while (true)
    {
        rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
    }
    return 0;
}