# Micro-ROS on Raspberry Pi Pico with C++ and LCD Display (Python Integration)

This guide covers setting up Micro-ROS on a Raspberry Pi Pico, interfacing with an LCD display using C++, and integrating with Python for higher-level control.

## Prerequisites

- Raspberry Pi Pico
- Micro-ROS compatible development environment
- LCD display (I2C or SPI interface)
- Host machine running Ubuntu 20.04/22.04 or ROS 2

## Part 1: Micro-ROS Setup on Raspberry Pi Pico (C++)

### 1. Install Micro-ROS build system

```bash
# Install dependencies
sudo apt update && sudo apt install -y git wget python3-pip

# Get the Micro-ROS build system
mkdir -p ~/microros_ws/src
cd ~/microros_ws/src
git clone -b humble https://github.com/micro-ROS/micro_ros_setup.git
cd ~/microros_ws
source /opt/ros/humble/setup.bash
colcon build
source install/local_setup.bash
```

### 2. Create Micro-ROS firmware for Pico

```bash
# Create firmware
ros2 run micro_ros_setup create_firmware_ws.sh host raspberrypi_pico

# Configure and build
ros2 run micro_ros_setup configure_firmware.sh microros_agent --transport serial
ros2 run micro_ros_setup build_firmware.sh
```

### 3. Flash the Pico

1. Put your Pico in bootloader mode (hold BOOTSEL while connecting USB)
2. Copy the generated UF2 file to the Pico mass storage device

```bash
cp ~/microros_ws/firmware/raspberrypi_pico/microros_raspberrypi_pico.uf2 /media/$USER/RPI-RP2/
```

## Part 2: LCD Interface with C++

### Example code for I2C LCD (using Pico SDK)

```cpp
#include "pico/stdlib.h"
#include "hardware/i2c.h"
#include "microros_transports.h"
#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <std_msgs/msg/string.h>

// LCD I2C address (typically 0x27 or 0x3F)
#define LCD_ADDR 0x27

// Initialize I2C
void i2c_init_lcd() {
    i2c_init(i2c_default, 100 * 1000);
    gpio_set_function(PICO_DEFAULT_I2C_SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C);
    gpio_pull_up(PICO_DEFAULT_I2C_SDA_PIN);
    gpio_pull_up(PICO_DEFAULT_I2C_SCL_PIN);
}

// Send command to LCD
void lcd_send_cmd(uint8_t cmd) {
    uint8_t data[2] = {0x80, cmd};
    i2c_write_blocking(i2c_default, LCD_ADDR, data, 2, false);
}

// Send data to LCD
void lcd_send_data(uint8_t data) {
    uint8_t data_u[2] = {0x40, data};
    i2c_write_blocking(i2c_default, LCD_ADDR, data_u, 2, false);
}

// Initialize LCD
void lcd_init() {
    sleep_ms(50);
    lcd_send_cmd(0x38); // Function set
    sleep_ms(5);
    lcd_send_cmd(0x0C); // Display ON, Cursor OFF
    sleep_ms(5);
    lcd_send_cmd(0x01); // Clear display
    sleep_ms(5);
    lcd_send_cmd(0x06); // Entry mode set
}

// Print string to LCD
void lcd_print(const char *str) {
    while (*str) {
        lcd_send_data(*str++);
    }
}

// Micro-ROS node
rcl_publisher_t publisher;
std_msgs__msg__String msg;

void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
    (void)last_call_time;
    if (timer != NULL) {
        rcl_publish(&publisher, &msg, NULL);
    }
}

int main() {
    // Initialize LCD
    i2c_init_lcd();
    lcd_init();
    lcd_print("Micro-ROS Ready");

    // Micro-ROS setup
    rcl_allocator_t allocator = rcl_get_default_allocator();
    rclc_support_t support;
    rclc_executor_t executor;
    rcl_node_t node;
    rcl_timer_t timer;

    // Initialize Micro-ROS
    set_microros_transports();
    rclc_support_init(&support, 0, NULL, &allocator);
    rclc_node_init_default(&node, "pico_lcd_node", "", &support);
    
    // Create publisher
    rclc_publisher_init_default(
        &publisher,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
        "pico_lcd_output");
    
    // Create timer
    rclc_timer_init_default(
        &timer,
        &support,
        RCL_MS_TO_NS(1000),
        timer_callback);

    // Create executor
    rclc_executor_init(&executor, &support.context, 1, &allocator);
    rclc_executor_add_timer(&executor, &timer);

    msg.data.data = (char*)allocator.allocate(50, allocator.state);
    msg.data.capacity = 50;

    while (true) {
        rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
        // Update LCD with message data if needed
    }

    // Cleanup
    rcl_publisher_fini(&publisher, &node);
    rcl_node_fini(&node);
    return 0;
}
```

## Part 3: Python Integration

### Python script to interact with Micro-ROS Pico node

```python
#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import String

class PicoLCDController(Node):
    def __init__(self):
        super().__init__('pico_lcd_controller')
        self.subscription = self.create_subscription(
            String,
            'pico_lcd_output',
            self.listener_callback,
            10)
        self.publisher = self.create_publisher(String, 'pico_lcd_input', 10)
        
        self.get_logger().info("Python LCD Controller ready")
        
    def listener_callback(self, msg):
        self.get_logger().info(f"Received from Pico: {msg.data}")
        
    def send_to_lcd(self, text):
        msg = String()
        msg.data = text
        self.publisher.publish(msg)
        self.get_logger().info(f"Sent to Pico LCD: {text}")

def main(args=None):
    rclpy.init(args=args)
    controller = PicoLCDController()
    
    try:
        # Example: Send message to LCD every 5 seconds
        import time
        counter = 0
        while rclpy.ok():
            controller.send_to_lcd(f"Python msg {counter}")
            counter += 1
            time.sleep(5)
            rclpy.spin_once(controller)
    except KeyboardInterrupt:
        pass
        
    controller.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
```

## Part 4: Running the System

1. Start the Micro-ROS agent on your host machine:

```bash
# Source ROS 2 environment
source /opt/ros/humble/setup.bash

# Start Micro-ROS agent
ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyACM0
```

2. Run the Python controller:

```bash
python3 pico_lcd_controller.py
```

## Additional Tips

1. For better LCD libraries, consider using dedicated Pico libraries like:
   - https://github.com/T-622/RPI-PICO-I2C-LCD
   - https://github.com/adafruit/Adafruit_CircuitPython_CharLCD

2. For more complex ROS 2 interactions, you can add services or custom messages.

3. Make sure to handle power properly for both the Pico and LCD display.

4. Consider adding error handling for I2C communication and ROS 2 connection issues.
