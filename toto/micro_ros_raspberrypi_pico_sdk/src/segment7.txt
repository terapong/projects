# Micro-ROS with Raspberry Pi Pico and 7-Segment Display

This guide covers how to use Micro-ROS on a Raspberry Pi Pico to control a 7-segment display using both C++ and Python approaches.

## Prerequisites

- Raspberry Pi Pico
- 7-segment display (common cathode or common anode)
- Resistors (220-330Ω)
- Micro-ROS setup on your host machine
- ROS 2 installed (Humble or newer recommended)

## Hardware Connections

For a common cathode 7-segment display:

```
Pico GPIO   →  Segment   →  Resistor → Display Pin
GP0        →  a         →  220Ω     → a
GP1        →  b         →  220Ω     → b
GP2        →  c         →  220Ω     → c
GP3        →  d         →  220Ω     → d
GP4        →  e         →  220Ω     → e
GP5        →  f         →  220Ω     → f
GP6        →  g         →  220Ω     → g
GND        →  Common Cathode
```

For common anode, connect common to 3.3V and use Pico GPIOs to sink current.

## C++ Approach with Micro-ROS

### 1. Micro-ROS Pico Setup

1. Follow the Micro-ROS Pico setup instructions from [micro-ros documentation](https://micro.ros.org/docs/tutorials/core/first_application_rtos/freertos/)

2. Create a new Micro-ROS project for Pico

### 2. C++ Code Example

```cpp
#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/int32.h>

// Pico SDK
#include "pico/stdlib.h"

// Define GPIO pins for each segment
const uint a = 0;
const uint b = 1;
const uint c = 2;
const uint d = 3;
const uint e = 4;
const uint f = 5;
const uint g = 6;

rcl_publisher_t publisher;
rcl_subscription_t subscriber;
std_msgs__msg__Int32 msg;

// Segment patterns for digits 0-9 (common cathode)
const uint8_t digit_patterns[10] = {
    0b00111111, // 0
    0b00000110, // 1
    0b01011011, // 2
    0b01001111, // 3
    0b01100110, // 4
    0b01101101, // 5
    0b01111101, // 6
    0b00000111, // 7
    0b01111111, // 8
    0b01101111  // 9
};

void display_digit(int digit) {
    if (digit < 0 || digit > 9) return;
    
    uint8_t pattern = digit_patterns[digit];
    
    gpio_put(a, pattern & 0b00000001);
    gpio_put(b, pattern & 0b00000010);
    gpio_put(c, pattern & 0b00000100);
    gpio_put(d, pattern & 0b00001000);
    gpio_put(e, pattern & 0b00010000);
    gpio_put(f, pattern & 0b00100000);
    gpio_put(g, pattern & 0b01000000);
}

void subscription_callback(const void *msgin) {
    const std_msgs__msg__Int32 *msg = (const std_msgs__msg__Int32 *)msgin;
    display_digit(msg->data);
}

void micro_ros_init() {
    rcl_allocator_t allocator = rcl_get_default_allocator();
    rclc_support_t support;
    rclc_executor_t executor;
    
    // Initialize micro-ROS
    rclc_support_init(&support, 0, NULL, &allocator);
    
    // Create node
    rcl_node_t node;
    rclc_node_init_default(&node, "pico_7segment_node", "", &support);
    
    // Create subscriber
    rclc_subscription_init_default(
        &subscriber,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
        "display_digit");
    
    // Create executor
    rclc_executor_init(&executor, &support.context, 1, &allocator);
    rclc_executor_add_subscription(&executor, &subscriber, &msg, &subscription_callback, ON_NEW_DATA);
    
    // Initialize GPIO
    gpio_init(a); gpio_set_dir(a, GPIO_OUT);
    gpio_init(b); gpio_set_dir(b, GPIO_OUT);
    gpio_init(c); gpio_set_dir(c, GPIO_OUT);
    gpio_init(d); gpio_set_dir(d, GPIO_OUT);
    gpio_init(e); gpio_set_dir(e, GPIO_OUT);
    gpio_init(f); gpio_set_dir(f, GPIO_OUT);
    gpio_init(g); gpio_set_dir(g, GPIO_OUT);
    
    // Spin forever
    while(true) {
        rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
    }
}

int main() {
    stdio_init_all();
    micro_ros_init();
    return 0;
}
```

### 3. Building and Flashing

1. Add this code to your Micro-ROS project
2. Build and flash to your Pico
3. On your ROS 2 host machine, you can now publish to the "display_digit" topic:
   ```bash
   ros2 topic pub /display_digit std_msgs/msg/Int32 "{data: 5}"
   ```

## Python Approach (Without Micro-ROS)

If you want a simpler approach without Micro-ROS, you can use CircuitPython or MicroPython:

### 1. MicroPython Example

```python
from machine import Pin
import time

# Define segment pins
segments = [
    Pin(0, Pin.OUT),  # a
    Pin(1, Pin.OUT),  # b
    Pin(2, Pin.OUT),  # c
    Pin(3, Pin.OUT),  # d
    Pin(4, Pin.OUT),  # e
    Pin(5, Pin.OUT),  # f
    Pin(6, Pin.OUT)   # g
]

# Common cathode digit patterns 0-9
digit_patterns = [
    [1,1,1,1,1,1,0], # 0
    [0,1,1,0,0,0,0], # 1
    [1,1,0,1,1,0,1], # 2
    [1,1,1,1,0,0,1], # 3
    [0,1,1,0,0,1,1], # 4
    [1,0,1,1,0,1,1], # 5
    [1,0,1,1,1,1,1], # 6
    [1,1,1,0,0,0,0], # 7
    [1,1,1,1,1,1,1], # 8
    [1,1,1,1,0,1,1]  # 9
]

def display_digit(digit):
    if 0 <= digit <= 9:
        for i in range(7):
            segments[i].value(digit_patterns[digit][i])

# Test count from 0 to 9
while True:
    for i in range(10):
        display_digit(i)
        time.sleep(1)
```

### 2. Python with ROS 2 Host Control

You can also control the Pico from a ROS 2 host via serial:

1. On Pico (MicroPython):
```python
import machine
import uos
import time

uart = machine.UART(0, baudrate=115200)
# [Include the display code from above]

while True:
    if uart.any():
        digit = int(uart.read(1))
        display_digit(digit)
```

2. On ROS 2 host (Python):
```python
import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32
import serial

class PicoDisplayController(Node):
    def __init__(self):
        super().__init__('pico_display_controller')
        self.subscription = self.create_subscription(
            Int32,
            'display_digit',
            self.listener_callback,
            10)
        self.serial = serial.Serial('/dev/ttyACM0', 115200)
        
    def listener_callback(self, msg):
        self.get_logger().info(f'Displaying: {msg.data}')
        self.serial.write(str(msg.data).encode())

def main(args=None):
    rclpy.init(args=args)
    node = PicoDisplayController()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
```

## Conclusion

- For full Micro-ROS integration, use the C++ approach
- For simpler projects, the MicroPython approach works well
- The Python ROS 2 host + serial approach provides a middle ground

Remember to adjust the GPIO pins and segment patterns based on your specific 7-segment display type (common cathode or common anode).
